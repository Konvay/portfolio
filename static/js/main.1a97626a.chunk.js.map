{"version":3,"sources":["serviceWorker.js","state/actions/fault.actions.js","state/reducers/fault.reducers.js","state/reducers/all.reducers.js","state/index.js","pages/Home.jsx","pages/About.jsx","routes/index.js","pages/DeathRollTwitchApp.jsx","pages/Fault/Items.jsx","pages/NotFound.jsx","routes/RouteAndSubRoutes.js","components/Header.jsx","components/Footer.jsx","App.js","index.js"],"names":["Boolean","window","location","hostname","match","getItemList","a","axios","get","response","items","data","authReducer","createReducer","isFetching","dispatch","action","allReducers","combineReducers","faultReducer","persistConfig","key","storage","whitelist","persistedReducer","persistReducer","middleware","applyMiddleware","thunk","logger","store","createStore","persistor","persistStore","Home","Grid","container","item","xs","About","class","direction","justify","routes","path","exact","component","useState","divItems","setDivItems","isLoading","setLoading","getItems","itemData","i","push","id","name","color","cost","passive","active","attributes","buildsFrom","children","treeId","Enumerable","from","orderBy","thenBy","toArray","useEffect","map","index","filter","subitem","subindex","AttributeName","RouteAndSubRoutes","route","render","props","Header","AppBar","style","navbarStyles","navbar","position","Toolbar","IconButton","edge","aria-label","Link","to","Button","className","backgroundColor","links","aLink","aVisited","aHover","aActive","Footer","AppBase","StrictMode","loading","basename","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1a97626a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import axios from 'axios'\r\n\r\nconst DOMAIN = 'https://api.playfault.com'\r\nconst ITEMS_ROUTE = 'items'\r\n\r\nexport const getItemList = async () => {\r\n    const response = await axios.get(`${DOMAIN}/${ITEMS_ROUTE}`)\r\n    const items = response.data\r\n\r\n    return (\r\n        items\r\n    )\r\n}","import { createReducer} from '@reduxjs/toolkit'\r\n\r\nimport {\r\n    getItemList\r\n} from '../actions/fault.actions'\r\n\r\nconst initialState = {\r\n    isFetching: false\r\n}\r\n\r\nconst authReducer = createReducer(initialState, {\r\n    [\"OHAI\"]: (dispatch, action) => {\r\n        dispatch(() => getItemList())\r\n    }\r\n});\r\n\r\nexport default authReducer;","import { combineReducers } from 'redux'\r\nimport * as faultReducer from './fault.reducers'\r\n\r\nconst allReducers = combineReducers({...faultReducer});\r\n\r\nexport default allReducers;","import { createStore, applyMiddleware } from 'redux'\r\nimport storage from 'redux-persist/lib/storage'\r\nimport logger from 'redux-logger'\r\nimport thunk from 'redux-thunk'\r\nimport { persistReducer, persistStore } from 'redux-persist'\r\n\r\nimport allReducers from './reducers/all.reducers'\r\n\r\nconst persistConfig = {\r\n  key: 'authentication',\r\n  storage: storage,\r\n  whitelist: []\r\n};\r\n\r\nconst persistedReducer = persistReducer(persistConfig, allReducers);\r\nconst middleware = applyMiddleware(thunk, logger);\r\nconst store = createStore(persistedReducer, {}, middleware);\r\n\r\nexport const persistor = persistStore(store);\r\nexport default store;\r\n","import React from 'react';\r\n\r\nimport {\r\n  Grid\r\n} from '@material-ui/core'\r\n\r\nconst Home = () => {\r\n  return (\r\n    <div>\r\n      <Grid container>\r\n        <Grid item xs={12}>\r\n          Konvay Software LLC provides software solutions and development needs.\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;","import React from 'react'\r\n\r\nimport {\r\n    Grid,\r\n    Paper\r\n} from '@material-ui/core'\r\nimport '../styles/About.scss'\r\n\r\nconst About = () => {\r\n    return (\r\n        <div class=\"about\">\r\n            <Grid container\r\n                direction=\"row\"\r\n                justify=\"center\">\r\n                <Grid item xs={5}>\r\n                    <h3>Technology</h3>\r\n                    <ul>\r\n                        <li>.NET / C#</li>\r\n                        <li>Microsoft/T-SQL</li>\r\n                        <li>Azure</li>\r\n                        <li>Javascript</li>\r\n                        <ul>\r\n                            <li>React / React Native</li>\r\n                            <li>Node</li>\r\n                        </ul>\r\n                        <li>Azure / AWS</li>\r\n                    </ul>\r\n                </Grid>\r\n                <Grid item xs={5}>\r\n                    <h3>Skills</h3>\r\n                    <ul>\r\n                        <li>Application Architecture</li>\r\n                        <li>Cloud Technology / Solutions</li>\r\n                        <ul>\r\n                            <li>Azure</li>\r\n                            <li>AWS</li>\r\n                        </ul>\r\n                        <li>Web / API Development</li>\r\n                        <ul>\r\n                            <li>Authentication / Authorization</li>\r\n                            <li>RESTful</li>\r\n                        </ul>\r\n                        <li>Database Design / Development</li>\r\n                    </ul>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default About","import Home from '../pages/Home'\r\nimport About from '../pages/About'\r\nimport FaultItems from '../pages/Fault/Items'\r\nimport NotFound from '../pages/NotFound'\r\nimport DeathRollTwitchApp from '../pages/DeathRollTwitchApp';\r\n\r\nconst routes = [\r\n  { path: \"/\", key: \"ROOT\", exact: true, component: Home },\r\n  { path: \"/about\", key: \"ABOUT\", exact: true, component: About },\r\n  { path: \"/deathroll\", key: \"DEATHROLL\", exact: true, component: DeathRollTwitchApp},\r\n  { path: \"/fault/items\", key: \"FAULT_ITEMS\", exact: true, component: FaultItems },\r\n\r\n  // Catch All Else\r\n  { path: \"/:NotFound\", component: NotFound }\r\n];\r\n\r\nexport default routes;","import React from 'react'\r\n\r\nconst DeathRollTwitchApp = () => {\r\n    return (\r\n        <div></div>\r\n    )\r\n}\r\n\r\nexport default DeathRollTwitchApp","import React, { useState } from 'react'\r\nimport Enumerable from 'linq'\r\n\r\nimport { getItemList } from '../../state/actions/fault.actions'\r\nimport { useEffect } from 'react';\r\n\r\nconst Fault = () => {\r\n    const treeMap = {\r\n        consumable: 10,\r\n        emblem: 11\r\n    }\r\n\r\n    const [divItems, setDivItems] = useState({})\r\n    const [isLoading, setLoading] = useState(true)\r\n\r\n    const getItems = async () => {\r\n        const itemData = await getItemList()\r\n        let items = []\r\n\r\n        for(let i = 0; i < 500; i++) {\r\n            if(itemData[i]) {\r\n                items.push({\r\n                    id: i,\r\n                    name: itemData[i].name,\r\n                    color: itemData[i].color,\r\n                    cost: itemData[i].cost,\r\n                    passive: itemData[i].passive,\r\n                    active: itemData[i].active,\r\n                    attributes: itemData[i].attributes,\r\n                    buildsFrom: itemData[i].children[0],\r\n                    treeId: itemData[i].treeId\r\n                })\r\n            }\r\n        }\r\n\r\n        items = Enumerable.from(items)\r\n            .orderBy(i => i.color != \"None\")\r\n            .thenBy(i => i.color)\r\n            .thenBy(i => i.name)\r\n            .toArray()\r\n\r\n        setDivItems(items)\r\n        setLoading(false)\r\n    }\r\n\r\n    useEffect(() => {\r\n        getItems();\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            { isLoading \r\n                ? <div>Loading</div>\r\n                : <table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Name</th>\r\n                            <th>Aspect</th>\r\n                            <th>Builds From</th>\r\n                            <th>Attributes</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        { divItems.map((item, index) => (\r\n                            <tr>\r\n                                <td>{item.name}</td>\r\n                                <td>{item.color}</td>\r\n                                <td>{divItems.filter(function (i) {\r\n                                        return i.id == item?.buildsFrom }\r\n                                    )[0]?.name }</td>\r\n                                <td>\r\n                                    <ul>\r\n                                        {item.attributes.map((subitem,subindex) => (\r\n                                            <li>{subitem.AttributeName}</li>\r\n                                        ))}\r\n                                    </ul>\r\n                                </td>\r\n                            </tr>\r\n                        ))}\r\n                    </tbody>\r\n                </table>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Fault","import  React from 'react'\r\n\r\nconst NotFound = () => {\r\n    return (\r\n        <div>Page Not Found</div>\r\n    );\r\n}\r\n\r\nexport default NotFound;","import React from 'react'\r\nimport { Route} from 'react-router-dom'\r\n\r\nexport const RouteAndSubRoutes = route => {\r\n    return (\r\n        <Route\r\n            path={route.path}\r\n            render={props => (\r\n                <route.component { ...props}\r\n                routes={route.routes} />\r\n            )}\r\n        />\r\n    );\r\n}\r\n\r\nexport default RouteAndSubRoutes;","import React from 'react'\r\nimport {\r\n    Link\r\n} from 'react-router-dom'\r\n\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    IconButton,\r\n    Toolbar,\r\n} from '@material-ui/core'\r\n\r\nimport {\r\n    Home\r\n} from '@material-ui/icons'\r\n\r\nimport '../styles/Header.scss'\r\n\r\nconst Header = () => {\r\n    return (\r\n        <AppBar style={navbarStyles.navbar} position=\"static\">\r\n            <Toolbar>\r\n                <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\"\r\n                     component={Link} to=\"\">\r\n                    <Home />\r\n                </IconButton>\r\n                <Button className=\"navbar-link\" component={Link} to=\"/about\">\r\n                    About\r\n                </Button>\r\n                <Button className=\"navbar-link\" component={Link} to=\"/fault/items\">\r\n                    Fault (Items)\r\n                </Button>\r\n                {/*               \r\n                <Button className=\"navbar-link\" component={Link} to=\"/deathroll\">\r\n                    Death Roll\r\n                </Button>\r\n                */}\r\n            </Toolbar>\r\n        </AppBar>\r\n    )\r\n}\r\n\r\nexport default Header\r\n\r\nconst navbarStyles = {\r\n    navbar: {\r\n        backgroundColor: \"#006699\"\r\n    },\r\n    links: {\r\n        aLink: \"#FFF\",\r\n        aVisited: \"#FFF\",\r\n        aHover: \"#FFF\",\r\n        aActive: \"#FFF\"\r\n    }\r\n}","import React from 'react'\r\n\r\nimport '../styles/Footer.scss'\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <footer class=\"footer\">\r\n            <div>Powered by Konvay Software LLC</div>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer","import React from 'react';\r\nimport { Switch } from 'react-router-dom'\r\n\r\nimport { HashRouter } from 'react-router-dom'  \r\nimport { Provider } from 'react-redux'\r\n\r\nimport { PersistGate } from 'redux-persist/integration/react'\r\n\r\nimport store, { persistor } from './state'\r\nimport routes from './routes'\r\nimport RouteAndSubRoutes from './routes/RouteAndSubRoutes'\r\n\r\nimport Header from './components/Header'\r\nimport Footer from './components/Footer'\r\n\r\nimport './styles/App.scss'\r\n\r\nconst AppBase = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <div class=\"site-wrapper\">\r\n        <React.StrictMode>\r\n          <Provider store={store}>\r\n            <PersistGate\r\n              loading=\"Loading...\"\r\n              persistor={persistor}\r\n            >\r\n              \r\n              <HashRouter\r\n                basename=\"/\">\r\n                <Header />\r\n                  <div class=\"site-content\">\r\n                    <Switch> {\r\n                      routes.map(\r\n                        (route, index) => \r\n                          <RouteAndSubRoutes key={index} {...route} />\r\n                        )\r\n                    }\r\n                    </Switch>\r\n                  </div>\r\n                <Footer />\r\n              </HashRouter>\r\n            </PersistGate>\r\n          </Provider>\r\n        </React.StrictMode>\r\n        </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AppBase;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport App from './App';\r\n\r\nimport './styles/index.scss';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}