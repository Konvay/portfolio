{"version":3,"sources":["serviceWorker.js","state/reducers/fault.reducers.js","state/reducers/all.reducers.js","state/index.js","routes/index.js","pages/Home.jsx","pages/About.jsx","pages/NotFound.jsx","routes/RouteAndSubRoutes.js","components/Header.jsx","components/Footer.jsx","App.js","index.js"],"names":["Boolean","window","location","hostname","match","authReducer","createReducer","isFetching","dispatch","action","loginUser","allReducers","combineReducers","faultReducer","persistConfig","key","storage","whitelist","persistedReducer","persistReducer","middleware","applyMiddleware","thunk","logger","store","createStore","persistor","persistStore","routes","path","exact","component","RouteAndSubRoutes","route","render","props","Header","AppBar","style","navbarStyles","navbar","position","Toolbar","IconButton","edge","color","aria-label","Link","to","Button","className","backgroundColor","links","aLink","aVisited","aHover","aActive","Footer","class","AppBase","StrictMode","loading","map","index","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4VAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4HCFSC,EANKC,YAJC,CACjBC,YAAY,GAGiB,eAC5B,QAAS,SAACC,EAAUC,GACjBD,GAAS,kBAAME,6BCPRC,EAFKC,YAAgB,eAAIC,ICKlCC,EAAgB,CACpBC,IAAK,iBACLC,QAASA,IACTC,UAAW,IAGPC,EAAmBC,YAAeL,EAAeH,GACjDS,EAAaC,YAAgBC,IAAOC,KACpCC,EAAQC,YAAYP,EAAkB,GAAIE,GAEnCM,EAAYC,YAAaH,GACvBA,ICPAI,EARA,CACb,CAAEC,KAAM,IAAKd,IAAK,OAAQe,OAAO,EAAMC,UCH5B,WACX,OACE,sDDEF,CAAEF,KAAM,SAAUd,IAAK,QAASe,OAAO,EAAMC,UEJjC,WAGV,OACI,6BACI,oCFEV,CAAEF,KAAM,aAAcE,UGPP,WACb,OACI,kDCWOC,EAZkB,SAAAC,GAC7B,OACI,kBAAC,IAAD,CACIJ,KAAMI,EAAMJ,KACZK,OAAQ,SAAAC,GAAK,OACT,kBAACF,EAAMF,UAAP,iBAAsBI,EAAtB,CACAP,OAAQK,EAAML,c,wCCyBfQ,G,MAhBA,WACX,OACI,kBAACC,EAAA,EAAD,CAAQC,MAAOC,EAAaC,OAAQC,SAAS,UACzC,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,KAAK,QAAQC,MAAM,UAAUC,aAAW,OAC/Cf,UAAWgB,IAAMC,GAAG,IACrB,kBAAC,IAAD,OAEJ,kBAACC,EAAA,EAAD,CAAQC,UAAU,cAAcnB,UAAWgB,IAAMC,GAAG,UAApD,aAUVT,EAAe,CACjBC,OAAQ,CACJW,gBAAiB,WAErBC,MAAO,CACHC,MAAO,OACPC,SAAU,OACVC,OAAQ,OACRC,QAAS,SChCFC,G,MARA,WACX,OACI,4BAAQC,MAAM,UACV,kECyCGC,G,MA/BC,WACd,OACE,yBAAKT,UAAU,OACb,yBAAKQ,MAAM,gBACT,kBAAC,IAAME,WAAP,KACE,kBAAC,IAAD,CAAUpC,MAAOA,GACf,kBAAC,IAAD,CACEqC,QAAQ,aACRnC,UAAWA,GAEX,kBAAC,IAAD,KACE,kBAAC,EAAD,MACE,yBAAKgC,MAAM,gBACT,kBAAC,IAAD,SACE9B,EAAOkC,KACL,SAAC7B,EAAO8B,GAAR,OACE,kBAAC,EAAD,eAAmBhD,IAAKgD,GAAW9B,SAK7C,kBAAC,EAAD,c,MC9BhB+B,IAAS9B,OACP,kBAAC,IAAM0B,WAAP,KACE,kBAAC,EAAD,OAEFK,SAASC,eAAe,SZuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.571a44ef.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createReducer} from '@reduxjs/toolkit'\r\n\r\nimport {\r\n    loginUser\r\n} from '../actions/fault.actions'\r\n\r\nconst initialState = {\r\n    isFetching: false\r\n}\r\n\r\nconst authReducer = createReducer(initialState, {\r\n    [\"OHAI\"]: (dispatch, action) => {\r\n        dispatch(() => loginUser())\r\n    }\r\n});\r\n\r\nexport default authReducer;","import { combineReducers } from 'redux'\r\nimport * as faultReducer from './fault.reducers'\r\n\r\nconst allReducers = combineReducers({...faultReducer});\r\n\r\nexport default allReducers;","import { createStore, applyMiddleware } from 'redux'\r\nimport storage from 'redux-persist/lib/storage'\r\nimport logger from 'redux-logger'\r\nimport thunk from 'redux-thunk'\r\nimport { persistReducer, persistStore } from 'redux-persist'\r\n\r\nimport allReducers from './reducers/all.reducers'\r\n\r\nconst persistConfig = {\r\n  key: 'authentication',\r\n  storage: storage,\r\n  whitelist: []\r\n};\r\n\r\nconst persistedReducer = persistReducer(persistConfig, allReducers);\r\nconst middleware = applyMiddleware(thunk, logger);\r\nconst store = createStore(persistedReducer, {}, middleware);\r\n\r\nexport const persistor = persistStore(store);\r\nexport default store;\r\n","import Home from '../pages/Home'\r\nimport About from '../pages/About'\r\nimport NotFound from '../pages/NotFound'\r\n\r\nconst routes = [\r\n  { path: \"/\", key: \"ROOT\", exact: true, component: Home },\r\n  { path: \"/about\", key: \"ABOUT\", exact: true, component: About },\r\n\r\n  // Catch All Else\r\n  { path: \"/:NotFound\", component: NotFound }\r\n];\r\n\r\nexport default routes;","import React from 'react';\r\n\r\nconst Home = () => {\r\n  return (\r\n    <div>\r\n      Work In Progress...\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;","import React from 'react'\r\n\r\nconst About = () => {\r\n\r\n\r\n    return (\r\n        <div>\r\n            <p>Hi</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default About","import  React from 'react'\r\n\r\nconst NotFound = () => {\r\n    return (\r\n        <div>Page Not Found</div>\r\n    );\r\n}\r\n\r\nexport default NotFound;","import React from 'react'\r\nimport { Route} from 'react-router-dom'\r\n\r\nexport const RouteAndSubRoutes = route => {\r\n    return (\r\n        <Route\r\n            path={route.path}\r\n            render={props => (\r\n                <route.component { ...props}\r\n                routes={route.routes} />\r\n            )}\r\n        />\r\n    );\r\n}\r\n\r\nexport default RouteAndSubRoutes;","import React from 'react'\r\nimport {\r\n    Link\r\n} from 'react-router-dom'\r\n\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    IconButton,\r\n    Toolbar,\r\n} from '@material-ui/core'\r\n\r\nimport {\r\n    Home\r\n} from '@material-ui/icons'\r\n\r\nimport '../styles/Header.scss'\r\n\r\nconst Header = () => {\r\n    return (\r\n        <AppBar style={navbarStyles.navbar} position=\"static\">\r\n            <Toolbar>\r\n                <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\"\r\n                     component={Link} to=\"\">\r\n                    <Home />\r\n                </IconButton>\r\n                <Button className=\"navbar-link\" component={Link} to=\"/about\">\r\n                    About\r\n                </Button>\r\n            </Toolbar>\r\n        </AppBar>\r\n    )\r\n}\r\n\r\nexport default Header\r\n\r\nconst navbarStyles = {\r\n    navbar: {\r\n        backgroundColor: \"#006699\"\r\n    },\r\n    links: {\r\n        aLink: \"#FFF\",\r\n        aVisited: \"#FFF\",\r\n        aHover: \"#FFF\",\r\n        aActive: \"#FFF\"\r\n    }\r\n}","import React from 'react'\r\n\r\nimport '../styles/Footer.scss'\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <footer class=\"footer\">\r\n            <div>Powered by Konvay Software LLC</div>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer","import React from 'react';\nimport { Switch } from 'react-router-dom'\n\nimport { BrowserRouter } from 'react-router-dom'  \nimport { Provider } from 'react-redux'\n\nimport { PersistGate } from 'redux-persist/integration/react'\n\nimport store, { persistor } from './state'\nimport routes from './routes'\nimport RouteAndSubRoutes from './routes/RouteAndSubRoutes'\n\nimport Header from './components/Header'\nimport Footer from './components/Footer'\n\nimport './styles/App.scss'\n\nconst AppBase = () => {\n  return (\n    <div className=\"App\">\n      <div class=\"site-wrapper\">\n        <React.StrictMode>\n          <Provider store={store}>\n            <PersistGate\n              loading=\"Loading...\"\n              persistor={persistor}\n            >\n              <BrowserRouter>\n                <Header />\n                  <div class=\"site-content\">\n                    <Switch> {\n                      routes.map(\n                        (route, index) => \n                          <RouteAndSubRoutes key={index} {...route} />\n                        )\n                    }\n                    </Switch>\n                  </div>\n                <Footer />\n              </BrowserRouter>\n            </PersistGate>\n          </Provider>\n        </React.StrictMode>\n        </div>\n    </div>\n  )\n}\n\nexport default AppBase;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './App';\n\nimport './styles/index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}